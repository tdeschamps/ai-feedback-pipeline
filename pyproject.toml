[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-feedback-pipeline"
version = "1.0.0"
description = "AI-Powered Feedback Categorization & RAG Pipeline"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [{ name = "Your Name", email = "your.email@example.com" }]
keywords = ["ai", "feedback", "rag", "llm", "vector-search", "notion"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
  "langchain>=0.1.0",
  "langchain-openai>=0.1.0",
  "langchain-anthropic>=0.1.0",
  "langchain-community>=0.0.20",
  "sentence-transformers>=2.2.2",
  "chromadb>=0.4.0",
  "pinecone>=5.0.0",
  "notion-client>=2.2.1",
  "fastapi>=0.104.0",
  "uvicorn>=0.24.0",
  "pydantic>=2.5.0",
  "python-dotenv>=1.0.0",
  "click>=8.1.0",
  "httpx>=0.25.0",
  "numpy>=1.24.0",
  "pandas>=2.1.0",
]

[project.optional-dependencies]
dev = [
  "pytest>=7.4.0",
  "pytest-asyncio>=0.21.0",
  "black>=23.0.0",
  "ruff>=0.1.0",
  "mypy>=1.7.0",
  "types-requests>=2.31.0",
]

[project.scripts]
feedback-pipeline = "main:cli"

[tool.hatch.build.targets.wheel]
packages = ["."]

[tool.hatch.build.targets.sdist]
include = ["*.py", "README.md", "pyproject.toml", ".ruff.toml"]

[project.urls]
Homepage = "https://github.com/yourusername/ai-feedback-pipeline"
Repository = "https://github.com/yourusername/ai-feedback-pipeline"
Issues = "https://github.com/yourusername/ai-feedback-pipeline/issues"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "C4", # flake8-comprehensions
  "UP", # pyupgrade
]
ignore = [
  "E501", # line too long, handled by black
  "B008", # do not perform function calls in argument defaults
  "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "ARG", "FBT"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["langchain.*", "chromadb.*", "pinecone.*", "notion_client.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
]

# UV Configuration
[tool.uv]
dev-dependencies = [
  "pytest>=7.4.0",
  "pytest-asyncio>=0.21.0",
  "black>=23.0.0",
  "ruff>=0.1.0",
  "mypy>=1.7.0",
  "types-requests>=2.31.0",
]

[tool.uv.sources]
# Optional: specify custom package sources if needed
# Example: custom-package = { git = "https://github.com/user/repo.git" }
