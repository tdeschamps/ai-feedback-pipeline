name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true

    - name: Install dependencies
      run: uv sync --dev

    - name: Lint with ruff
      run: uv run ruff check .

  style:
    name: Code Style Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true

    - name: Install dependencies
      run: uv sync --dev

    - name: Check code formatting with ruff
      run: uv run ruff format --check .

  typecheck:
    name: Type Checking
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true

    - name: Install dependencies
      run: uv sync --dev

    - name: Type check with mypy
      run: uv run mypy . --ignore-missing-imports

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [lint, style, typecheck]
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true

    - name: Install dependencies
      run: uv sync --dev

    - name: Test with pytest
      run: uv run pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true

  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    needs: [test, lint, style, typecheck, security]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ai-feedback-pipeline:latest .

    - name: Test Docker image
      run: |
        docker run --rm ai-feedback-pipeline:latest python -c "import config; print('Docker build successful')"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    needs: [test, lint, style, typecheck, security, docker]

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Staging deployment would go here"
        # Add your staging deployment logic here
        # Example: deploy to staging environment

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    needs: [deploy-staging]
    environment: production  # This will require manual approval

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Production deployment would go here"
        # Add your production deployment logic here
        # Example: deploy to production environment
